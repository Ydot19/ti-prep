// @generated by protobuf-ts 2.2.3-alpha.1 with parameter generate_dependencies
// @generated from protobuf file "rpc/v1/notes.proto" (package "rpc", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Problem } from "../../model/v1/problem";
import { Category } from "../../model/v1/problem";
/**
 * @generated from protobuf message rpc.GetProblemCategoriesRequest
 */
export interface GetProblemCategoriesRequest {
    /**
     * @generated from protobuf field: int32 limit = 1;
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 offset = 2;
     */
    offset: number;
}
/**
 * @generated from protobuf message rpc.GetProblemCategoriesResponse
 */
export interface GetProblemCategoriesResponse {
    /**
     * @generated from protobuf field: repeated model.Category details = 1;
     */
    details: Category[];
}
/**
 * @generated from protobuf message rpc.GetProblemsByCategoryRequest
 */
export interface GetProblemsByCategoryRequest {
    /**
     * @generated from protobuf field: int32 limit = 1;
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 offset = 2;
     */
    offset: number;
}
/**
 * @generated from protobuf message rpc.GetProblemsByCategoryResponse
 */
export interface GetProblemsByCategoryResponse {
    /**
     * @generated from protobuf field: repeated model.Problem details = 1;
     */
    details: Problem[];
}
/**
 * @generated from protobuf message rpc.GetProblemByIdRequest
 */
export interface GetProblemByIdRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message rpc.GetProblemByIdResponse
 */
export interface GetProblemByIdResponse {
    /**
     * @generated from protobuf field: model.Problem details = 1;
     */
    details?: Problem;
    /**
     * @generated from protobuf field: repeated string note_ids = 2;
     */
    noteIds: string[];
    /**
     * @generated from protobuf field: repeated string implementation_ids = 3;
     */
    implementationIds: string[];
}
/**
 * @generated from protobuf message rpc.GetProblemNotesByIdRequest
 */
export interface GetProblemNotesByIdRequest {
}
/**
 * @generated from protobuf message rpc.GetProblemNotesByIdResponse
 */
export interface GetProblemNotesByIdResponse {
}
/**
 * @generated from protobuf message rpc.GetImplementationNotesByIdRequest
 */
export interface GetImplementationNotesByIdRequest {
}
/**
 * @generated from protobuf message rpc.GetImplementationNotesByIdResponse
 */
export interface GetImplementationNotesByIdResponse {
}
/**
 * @generated from protobuf message rpc.CreateOrUpdateProblemDetailsRequest
 */
export interface CreateOrUpdateProblemDetailsRequest {
}
/**
 * @generated from protobuf message rpc.CreateOrUpdateProblemDetailsResponse
 */
export interface CreateOrUpdateProblemDetailsResponse {
}
/**
 * @generated from protobuf message rpc.CreateOrUpdateProblemNotesRequest
 */
export interface CreateOrUpdateProblemNotesRequest {
}
/**
 * @generated from protobuf message rpc.CreateOrUpdateProblemNotesResponse
 */
export interface CreateOrUpdateProblemNotesResponse {
}
/**
 * @generated from protobuf message rpc.GetAlgorithmCategoriesRequest
 */
export interface GetAlgorithmCategoriesRequest {
}
/**
 * @generated from protobuf message rpc.GetAlgorithmCategoriesResponse
 */
export interface GetAlgorithmCategoriesResponse {
}
/**
 * @generated from protobuf message rpc.GetAlgorithmsByCategoryRequest
 */
export interface GetAlgorithmsByCategoryRequest {
}
/**
 * @generated from protobuf message rpc.GetAlgorithmsByCategoryResponse
 */
export interface GetAlgorithmsByCategoryResponse {
}
/**
 * @generated from protobuf message rpc.CreateOrUpdateAlgorithmRequest
 */
export interface CreateOrUpdateAlgorithmRequest {
}
/**
 * @generated from protobuf message rpc.CreateOrUpdateAlgorithmResponse
 */
export interface CreateOrUpdateAlgorithmResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class GetProblemCategoriesRequest$Type extends MessageType<GetProblemCategoriesRequest> {
    constructor() {
        super("rpc.GetProblemCategoriesRequest", [
            { no: 1, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetProblemCategoriesRequest>): GetProblemCategoriesRequest {
        const message = { limit: 0, offset: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetProblemCategoriesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProblemCategoriesRequest): GetProblemCategoriesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 limit */ 1:
                    message.limit = reader.int32();
                    break;
                case /* int32 offset */ 2:
                    message.offset = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProblemCategoriesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 limit = 1; */
        if (message.limit !== 0)
            writer.tag(1, WireType.Varint).int32(message.limit);
        /* int32 offset = 2; */
        if (message.offset !== 0)
            writer.tag(2, WireType.Varint).int32(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.GetProblemCategoriesRequest
 */
export const GetProblemCategoriesRequest = new GetProblemCategoriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProblemCategoriesResponse$Type extends MessageType<GetProblemCategoriesResponse> {
    constructor() {
        super("rpc.GetProblemCategoriesResponse", [
            { no: 1, name: "details", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Category }
        ]);
    }
    create(value?: PartialMessage<GetProblemCategoriesResponse>): GetProblemCategoriesResponse {
        const message = { details: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetProblemCategoriesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProblemCategoriesResponse): GetProblemCategoriesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated model.Category details */ 1:
                    message.details.push(Category.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProblemCategoriesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated model.Category details = 1; */
        for (let i = 0; i < message.details.length; i++)
            Category.internalBinaryWrite(message.details[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.GetProblemCategoriesResponse
 */
export const GetProblemCategoriesResponse = new GetProblemCategoriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProblemsByCategoryRequest$Type extends MessageType<GetProblemsByCategoryRequest> {
    constructor() {
        super("rpc.GetProblemsByCategoryRequest", [
            { no: 1, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetProblemsByCategoryRequest>): GetProblemsByCategoryRequest {
        const message = { limit: 0, offset: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetProblemsByCategoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProblemsByCategoryRequest): GetProblemsByCategoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 limit */ 1:
                    message.limit = reader.int32();
                    break;
                case /* int32 offset */ 2:
                    message.offset = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProblemsByCategoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 limit = 1; */
        if (message.limit !== 0)
            writer.tag(1, WireType.Varint).int32(message.limit);
        /* int32 offset = 2; */
        if (message.offset !== 0)
            writer.tag(2, WireType.Varint).int32(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.GetProblemsByCategoryRequest
 */
export const GetProblemsByCategoryRequest = new GetProblemsByCategoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProblemsByCategoryResponse$Type extends MessageType<GetProblemsByCategoryResponse> {
    constructor() {
        super("rpc.GetProblemsByCategoryResponse", [
            { no: 1, name: "details", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Problem }
        ]);
    }
    create(value?: PartialMessage<GetProblemsByCategoryResponse>): GetProblemsByCategoryResponse {
        const message = { details: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetProblemsByCategoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProblemsByCategoryResponse): GetProblemsByCategoryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated model.Problem details */ 1:
                    message.details.push(Problem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProblemsByCategoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated model.Problem details = 1; */
        for (let i = 0; i < message.details.length; i++)
            Problem.internalBinaryWrite(message.details[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.GetProblemsByCategoryResponse
 */
export const GetProblemsByCategoryResponse = new GetProblemsByCategoryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProblemByIdRequest$Type extends MessageType<GetProblemByIdRequest> {
    constructor() {
        super("rpc.GetProblemByIdRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetProblemByIdRequest>): GetProblemByIdRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetProblemByIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProblemByIdRequest): GetProblemByIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProblemByIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.GetProblemByIdRequest
 */
export const GetProblemByIdRequest = new GetProblemByIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProblemByIdResponse$Type extends MessageType<GetProblemByIdResponse> {
    constructor() {
        super("rpc.GetProblemByIdResponse", [
            { no: 1, name: "details", kind: "message", T: () => Problem },
            { no: 2, name: "note_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "implementation_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetProblemByIdResponse>): GetProblemByIdResponse {
        const message = { noteIds: [], implementationIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetProblemByIdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProblemByIdResponse): GetProblemByIdResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* model.Problem details */ 1:
                    message.details = Problem.internalBinaryRead(reader, reader.uint32(), options, message.details);
                    break;
                case /* repeated string note_ids */ 2:
                    message.noteIds.push(reader.string());
                    break;
                case /* repeated string implementation_ids */ 3:
                    message.implementationIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProblemByIdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* model.Problem details = 1; */
        if (message.details)
            Problem.internalBinaryWrite(message.details, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string note_ids = 2; */
        for (let i = 0; i < message.noteIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.noteIds[i]);
        /* repeated string implementation_ids = 3; */
        for (let i = 0; i < message.implementationIds.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.implementationIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.GetProblemByIdResponse
 */
export const GetProblemByIdResponse = new GetProblemByIdResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProblemNotesByIdRequest$Type extends MessageType<GetProblemNotesByIdRequest> {
    constructor() {
        super("rpc.GetProblemNotesByIdRequest", []);
    }
    create(value?: PartialMessage<GetProblemNotesByIdRequest>): GetProblemNotesByIdRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetProblemNotesByIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProblemNotesByIdRequest): GetProblemNotesByIdRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetProblemNotesByIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.GetProblemNotesByIdRequest
 */
export const GetProblemNotesByIdRequest = new GetProblemNotesByIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProblemNotesByIdResponse$Type extends MessageType<GetProblemNotesByIdResponse> {
    constructor() {
        super("rpc.GetProblemNotesByIdResponse", []);
    }
    create(value?: PartialMessage<GetProblemNotesByIdResponse>): GetProblemNotesByIdResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetProblemNotesByIdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProblemNotesByIdResponse): GetProblemNotesByIdResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetProblemNotesByIdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.GetProblemNotesByIdResponse
 */
export const GetProblemNotesByIdResponse = new GetProblemNotesByIdResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetImplementationNotesByIdRequest$Type extends MessageType<GetImplementationNotesByIdRequest> {
    constructor() {
        super("rpc.GetImplementationNotesByIdRequest", []);
    }
    create(value?: PartialMessage<GetImplementationNotesByIdRequest>): GetImplementationNotesByIdRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetImplementationNotesByIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetImplementationNotesByIdRequest): GetImplementationNotesByIdRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetImplementationNotesByIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.GetImplementationNotesByIdRequest
 */
export const GetImplementationNotesByIdRequest = new GetImplementationNotesByIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetImplementationNotesByIdResponse$Type extends MessageType<GetImplementationNotesByIdResponse> {
    constructor() {
        super("rpc.GetImplementationNotesByIdResponse", []);
    }
    create(value?: PartialMessage<GetImplementationNotesByIdResponse>): GetImplementationNotesByIdResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetImplementationNotesByIdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetImplementationNotesByIdResponse): GetImplementationNotesByIdResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetImplementationNotesByIdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.GetImplementationNotesByIdResponse
 */
export const GetImplementationNotesByIdResponse = new GetImplementationNotesByIdResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateProblemDetailsRequest$Type extends MessageType<CreateOrUpdateProblemDetailsRequest> {
    constructor() {
        super("rpc.CreateOrUpdateProblemDetailsRequest", []);
    }
    create(value?: PartialMessage<CreateOrUpdateProblemDetailsRequest>): CreateOrUpdateProblemDetailsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateProblemDetailsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateProblemDetailsRequest): CreateOrUpdateProblemDetailsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CreateOrUpdateProblemDetailsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.CreateOrUpdateProblemDetailsRequest
 */
export const CreateOrUpdateProblemDetailsRequest = new CreateOrUpdateProblemDetailsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateProblemDetailsResponse$Type extends MessageType<CreateOrUpdateProblemDetailsResponse> {
    constructor() {
        super("rpc.CreateOrUpdateProblemDetailsResponse", []);
    }
    create(value?: PartialMessage<CreateOrUpdateProblemDetailsResponse>): CreateOrUpdateProblemDetailsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateProblemDetailsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateProblemDetailsResponse): CreateOrUpdateProblemDetailsResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CreateOrUpdateProblemDetailsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.CreateOrUpdateProblemDetailsResponse
 */
export const CreateOrUpdateProblemDetailsResponse = new CreateOrUpdateProblemDetailsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateProblemNotesRequest$Type extends MessageType<CreateOrUpdateProblemNotesRequest> {
    constructor() {
        super("rpc.CreateOrUpdateProblemNotesRequest", []);
    }
    create(value?: PartialMessage<CreateOrUpdateProblemNotesRequest>): CreateOrUpdateProblemNotesRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateProblemNotesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateProblemNotesRequest): CreateOrUpdateProblemNotesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CreateOrUpdateProblemNotesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.CreateOrUpdateProblemNotesRequest
 */
export const CreateOrUpdateProblemNotesRequest = new CreateOrUpdateProblemNotesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateProblemNotesResponse$Type extends MessageType<CreateOrUpdateProblemNotesResponse> {
    constructor() {
        super("rpc.CreateOrUpdateProblemNotesResponse", []);
    }
    create(value?: PartialMessage<CreateOrUpdateProblemNotesResponse>): CreateOrUpdateProblemNotesResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateProblemNotesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateProblemNotesResponse): CreateOrUpdateProblemNotesResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CreateOrUpdateProblemNotesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.CreateOrUpdateProblemNotesResponse
 */
export const CreateOrUpdateProblemNotesResponse = new CreateOrUpdateProblemNotesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAlgorithmCategoriesRequest$Type extends MessageType<GetAlgorithmCategoriesRequest> {
    constructor() {
        super("rpc.GetAlgorithmCategoriesRequest", []);
    }
    create(value?: PartialMessage<GetAlgorithmCategoriesRequest>): GetAlgorithmCategoriesRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAlgorithmCategoriesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAlgorithmCategoriesRequest): GetAlgorithmCategoriesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetAlgorithmCategoriesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.GetAlgorithmCategoriesRequest
 */
export const GetAlgorithmCategoriesRequest = new GetAlgorithmCategoriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAlgorithmCategoriesResponse$Type extends MessageType<GetAlgorithmCategoriesResponse> {
    constructor() {
        super("rpc.GetAlgorithmCategoriesResponse", []);
    }
    create(value?: PartialMessage<GetAlgorithmCategoriesResponse>): GetAlgorithmCategoriesResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAlgorithmCategoriesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAlgorithmCategoriesResponse): GetAlgorithmCategoriesResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetAlgorithmCategoriesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.GetAlgorithmCategoriesResponse
 */
export const GetAlgorithmCategoriesResponse = new GetAlgorithmCategoriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAlgorithmsByCategoryRequest$Type extends MessageType<GetAlgorithmsByCategoryRequest> {
    constructor() {
        super("rpc.GetAlgorithmsByCategoryRequest", []);
    }
    create(value?: PartialMessage<GetAlgorithmsByCategoryRequest>): GetAlgorithmsByCategoryRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAlgorithmsByCategoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAlgorithmsByCategoryRequest): GetAlgorithmsByCategoryRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetAlgorithmsByCategoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.GetAlgorithmsByCategoryRequest
 */
export const GetAlgorithmsByCategoryRequest = new GetAlgorithmsByCategoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAlgorithmsByCategoryResponse$Type extends MessageType<GetAlgorithmsByCategoryResponse> {
    constructor() {
        super("rpc.GetAlgorithmsByCategoryResponse", []);
    }
    create(value?: PartialMessage<GetAlgorithmsByCategoryResponse>): GetAlgorithmsByCategoryResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAlgorithmsByCategoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAlgorithmsByCategoryResponse): GetAlgorithmsByCategoryResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetAlgorithmsByCategoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.GetAlgorithmsByCategoryResponse
 */
export const GetAlgorithmsByCategoryResponse = new GetAlgorithmsByCategoryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateAlgorithmRequest$Type extends MessageType<CreateOrUpdateAlgorithmRequest> {
    constructor() {
        super("rpc.CreateOrUpdateAlgorithmRequest", []);
    }
    create(value?: PartialMessage<CreateOrUpdateAlgorithmRequest>): CreateOrUpdateAlgorithmRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateAlgorithmRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateAlgorithmRequest): CreateOrUpdateAlgorithmRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CreateOrUpdateAlgorithmRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.CreateOrUpdateAlgorithmRequest
 */
export const CreateOrUpdateAlgorithmRequest = new CreateOrUpdateAlgorithmRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateAlgorithmResponse$Type extends MessageType<CreateOrUpdateAlgorithmResponse> {
    constructor() {
        super("rpc.CreateOrUpdateAlgorithmResponse", []);
    }
    create(value?: PartialMessage<CreateOrUpdateAlgorithmResponse>): CreateOrUpdateAlgorithmResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateAlgorithmResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateAlgorithmResponse): CreateOrUpdateAlgorithmResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CreateOrUpdateAlgorithmResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rpc.CreateOrUpdateAlgorithmResponse
 */
export const CreateOrUpdateAlgorithmResponse = new CreateOrUpdateAlgorithmResponse$Type();
/**
 * @generated ServiceType for protobuf service rpc.NotesService
 */
export const NotesService = new ServiceType("rpc.NotesService", [
    { name: "GetProblemCategories", options: {}, I: GetProblemCategoriesRequest, O: GetProblemCategoriesResponse },
    { name: "GetProblemsByCategory", options: {}, I: GetProblemsByCategoryRequest, O: GetProblemsByCategoryResponse },
    { name: "GetProblemById", options: {}, I: GetProblemByIdRequest, O: GetProblemByIdResponse },
    { name: "GetProblemNotesById", options: {}, I: GetProblemNotesByIdRequest, O: GetProblemNotesByIdResponse },
    { name: "GetImplementationNotesById", options: {}, I: GetImplementationNotesByIdRequest, O: GetImplementationNotesByIdResponse },
    { name: "CreateOrUpdateProblemDetails", options: {}, I: CreateOrUpdateProblemDetailsRequest, O: CreateOrUpdateProblemDetailsResponse },
    { name: "CreateOrUpdateProblemNotes", options: {}, I: CreateOrUpdateProblemNotesRequest, O: CreateOrUpdateProblemNotesResponse },
    { name: "GetAlgorithmCategories", options: {}, I: GetAlgorithmCategoriesRequest, O: GetAlgorithmCategoriesResponse },
    { name: "GetAlgorithmsByCategory", options: {}, I: GetAlgorithmsByCategoryRequest, O: GetAlgorithmsByCategoryResponse },
    { name: "CreateOrUpdateAlgorithm", options: {}, I: CreateOrUpdateAlgorithmRequest, O: CreateOrUpdateAlgorithmResponse }
]);
