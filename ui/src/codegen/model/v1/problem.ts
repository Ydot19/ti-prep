// @generated by protobuf-ts 2.2.3-alpha.1 with parameter generate_dependencies
// @generated from protobuf file "model/v1/problem.proto" (package "model", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message model.CategoryCompletion
 */
export interface CategoryCompletion {
    /**
     * @generated from protobuf field: model.Difficulty difficulty = 1;
     */
    difficulty: Difficulty;
    /**
     * @generated from protobuf field: int32 mastered = 2;
     */
    mastered: number;
    /**
     * @generated from protobuf field: int32 total = 3;
     */
    total: number;
}
/**
 * @generated from protobuf message model.Category
 */
export interface Category {
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: model.CategoryCompletion easy = 3;
     */
    easy?: CategoryCompletion;
    /**
     * @generated from protobuf field: model.CategoryCompletion medium = 4;
     */
    medium?: CategoryCompletion;
    /**
     * @generated from protobuf field: model.CategoryCompletion hard = 5;
     */
    hard?: CategoryCompletion;
}
/**
 * @generated from protobuf message model.Note
 */
export interface Note {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message model.Problem
 */
export interface Problem {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string title_slug = 3;
     */
    titleSlug: string;
    /**
     * @generated from protobuf field: repeated string companies = 4;
     */
    companies: string[];
    /**
     * @generated from protobuf field: bool mastered = 5;
     */
    mastered: boolean;
    /**
     * @generated from protobuf field: bool bookmarked = 6;
     */
    bookmarked: boolean;
}
/**
 * @generated from protobuf enum model.Difficulty
 */
export enum Difficulty {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: EASY = 1;
     */
    EASY = 1,
    /**
     * @generated from protobuf enum value: MEDIUM = 2;
     */
    MEDIUM = 2,
    /**
     * @generated from protobuf enum value: HARD = 3;
     */
    HARD = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class CategoryCompletion$Type extends MessageType<CategoryCompletion> {
    constructor() {
        super("model.CategoryCompletion", [
            { no: 1, name: "difficulty", kind: "enum", T: () => ["model.Difficulty", Difficulty] },
            { no: 2, name: "mastered", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "total", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CategoryCompletion>): CategoryCompletion {
        const message = { difficulty: 0, mastered: 0, total: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CategoryCompletion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CategoryCompletion): CategoryCompletion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* model.Difficulty difficulty */ 1:
                    message.difficulty = reader.int32();
                    break;
                case /* int32 mastered */ 2:
                    message.mastered = reader.int32();
                    break;
                case /* int32 total */ 3:
                    message.total = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CategoryCompletion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* model.Difficulty difficulty = 1; */
        if (message.difficulty !== 0)
            writer.tag(1, WireType.Varint).int32(message.difficulty);
        /* int32 mastered = 2; */
        if (message.mastered !== 0)
            writer.tag(2, WireType.Varint).int32(message.mastered);
        /* int32 total = 3; */
        if (message.total !== 0)
            writer.tag(3, WireType.Varint).int32(message.total);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.CategoryCompletion
 */
export const CategoryCompletion = new CategoryCompletion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Category$Type extends MessageType<Category> {
    constructor() {
        super("model.Category", [
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "easy", kind: "message", T: () => CategoryCompletion },
            { no: 4, name: "medium", kind: "message", T: () => CategoryCompletion },
            { no: 5, name: "hard", kind: "message", T: () => CategoryCompletion }
        ]);
    }
    create(value?: PartialMessage<Category>): Category {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Category>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Category): Category {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* model.CategoryCompletion easy */ 3:
                    message.easy = CategoryCompletion.internalBinaryRead(reader, reader.uint32(), options, message.easy);
                    break;
                case /* model.CategoryCompletion medium */ 4:
                    message.medium = CategoryCompletion.internalBinaryRead(reader, reader.uint32(), options, message.medium);
                    break;
                case /* model.CategoryCompletion hard */ 5:
                    message.hard = CategoryCompletion.internalBinaryRead(reader, reader.uint32(), options, message.hard);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Category, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* model.CategoryCompletion easy = 3; */
        if (message.easy)
            CategoryCompletion.internalBinaryWrite(message.easy, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* model.CategoryCompletion medium = 4; */
        if (message.medium)
            CategoryCompletion.internalBinaryWrite(message.medium, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* model.CategoryCompletion hard = 5; */
        if (message.hard)
            CategoryCompletion.internalBinaryWrite(message.hard, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.Category
 */
export const Category = new Category$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Note$Type extends MessageType<Note> {
    constructor() {
        super("model.Note", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Note>): Note {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Note>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Note): Note {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Note, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.Note
 */
export const Note = new Note$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Problem$Type extends MessageType<Problem> {
    constructor() {
        super("model.Problem", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title_slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "companies", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "mastered", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "bookmarked", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Problem>): Problem {
        const message = { id: "", name: "", titleSlug: "", companies: [], mastered: false, bookmarked: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Problem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Problem): Problem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string title_slug */ 3:
                    message.titleSlug = reader.string();
                    break;
                case /* repeated string companies */ 4:
                    message.companies.push(reader.string());
                    break;
                case /* bool mastered */ 5:
                    message.mastered = reader.bool();
                    break;
                case /* bool bookmarked */ 6:
                    message.bookmarked = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Problem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string title_slug = 3; */
        if (message.titleSlug !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.titleSlug);
        /* repeated string companies = 4; */
        for (let i = 0; i < message.companies.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.companies[i]);
        /* bool mastered = 5; */
        if (message.mastered !== false)
            writer.tag(5, WireType.Varint).bool(message.mastered);
        /* bool bookmarked = 6; */
        if (message.bookmarked !== false)
            writer.tag(6, WireType.Varint).bool(message.bookmarked);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.Problem
 */
export const Problem = new Problem$Type();
